{"componentChunkName":"component---src-templates-blog-post-js","path":"/universal-js-app/","webpackCompilationHash":"2f34b24fe00db0cf9b1c","result":{"data":{"site":{"siteMetadata":{"title":"Jeremy Bernier","author":"@gatsbyjs"}},"markdownRemark":{"id":"ea97aa4d-26b2-500b-9c61-ec3bd96bf261","excerpt":"In this post I will explain what this is, and the basic idea of how to make one. First, let’s define what a universal Javascript Single-Page…","html":"<p>In this post I will explain what this is, and the basic idea of how to make one.</p>\n<p>First, let’s define what a universal Javascript Single-Page app with server-side rendering is.</p>\n<h3>Single-Page App</h3>\n<p>A single-page app (SPA) is basically a website without page refreshes.</p>\n<p>The main advantage is speed, but you can also do a hell of a lot more without page refreshes. For example, you can</p>\n<ul>\n<li>Have media playing across pages, such as music or video. Music players have to be SPAs because otherwise the music would stop every time you navigated to a new page (my first professional job working on an SPA was on a <a href=\"/iheart\">music player website</a>).</li>\n<li>Share state in memory across pages. I did this on <a href=\"/vroom\">an ecommerce site I built</a> to cache product data and avoid having to refetch data that’s already been obtained, saving bandwidth as well.</li>\n<li>Page animations</li>\n</ul>\n<p>Ultimately, SPAs are way faster and more powerful than normal websites. So why aren’t they the norm? Because they’ve historically been very complex to build. But now with libraries like React and React-Router, that is no longer the case.</p>\n<p>Now a really simplistic way to build a SPA is to just bundle all your Javascript code on the client, send an incomplete HTML file and offload all the rendering work to the client. In fact, the first front-end frameworks like Angular 1 did this. The problem is that 1. the website loads jankier and slower with a lot of shifting elements, meaning an inferior user experience 2. terrible for SEO because search engines can’t crawl your site.</p>\n<p>A better way is to initially render the site on the server (<strong>server-side rendering</strong>), and then for subsequent page navigations, you render on the client.</p>\n<p>Ok, so we know that to render our views on the client, we need to use Javascript because it’s the only language web browsers accept for client-side scripting (though with Web Assembly, maybe that’ll change in the future). So how do we render our views on the server?</p>\n<p>Before Node.js, you would’ve had to rewrite your client-side rendering logic in whatever language you were using on the backend (eg. Python). But thankfully with Node.js, you can reuse the same client-side Javascript code on the server.</p>\n<h3>Universal Javascript (a.k.a isomorphic Javascript)</h3>\n<p>This just means that your Javascript runs on both the client and the server (via Node.js). If your rendering logic is on both the client and server, then you can reuse the same code. This reduces the amount of code and leaves one source of truth, saving the developer the time and hassle of dealing with multiple codebases.</p>\n<h3>Building a SPA</h3>\n<p>Great, so now we know that we can use Node.js to build a blazing fast SPA with server-side rendering. How do we actually build one?</p>\n<p>First of all, there are frameworks like <a href=\"https://nextjs.org/\">Next.js</a> which do a lot of the work for you. But let’s say you want to build one yourself without being tied down to a framework.</p>\n<p>The basic idea is, that you have a single Javascript object called the <code class=\"language-text\">store</code> that contains all of your application state, and you initialize this on the initial page load. Given this <code class=\"language-text\">store</code>, you can render your website on both the server and the client. So the HTML template of your initial page load should have this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;...&lt;/head&gt;\n&lt;body&gt;\n...\n&lt;script&gt;\nwindow.__INITIAL_STATE__= ${JSON.stringify(initialState)}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>automatically abort fetching data</p>\n<p>code splitting</p>","frontmatter":{"title":"How to make a Universal Javascript Single-Page App with Server-Side Rendering","date":"August 20, 2019","cover":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/universal-js-app/"}}}